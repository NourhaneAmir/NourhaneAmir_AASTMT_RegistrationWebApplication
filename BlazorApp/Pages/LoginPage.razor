@page "/"
@using System.ComponentModel.DataAnnotations
@using BlazorApp.Services
@using StudentRegistration.Shared.Models
@inject IAuthService AuthService
@inject AuthState AuthState
@inject NavigationManager Navigation

<div class="flex items-center justify-center min-h-[calc(100vh-4rem)] py-8 px-4">
    <div class="max-w-md w-full">
        <div class="bg-white rounded-2xl shadow-xl p-8">
            <div class="text-center mb-8">
                <h2 class="text-3xl font-bold text-gray-900 mb-2">Student Login</h2>
                <p class="text-gray-600">Enter your credentials to access the registration system</p>
            </div>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded-lg">
                    @ErrorMessage
                </div>
            }

            @if (IsLoading)
            {
                <div class="mb-4 p-3 bg-blue-100 border border-blue-400 text-blue-700 rounded-lg text-center">
                    <div class="flex items-center justify-center">
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Logging in...
                    </div>
                </div>
            }

            <EditForm Model="loginModel" OnValidSubmit="HandleLogin" class="space-y-6">
                <DataAnnotationsValidator />

                <div>
                    <label for="regNumber" class="block text-base font-medium text-gray-700 mb-2">
                        Registration Number
                    </label>
                    <InputNumber id="regNumber"
                                 @bind-Value="loginModel.RegistrationNumber"
                                 class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                                 placeholder="Enter your registration number" />
                    <ValidationMessage For="@(() => loginModel.RegistrationNumber)"
                                       class="text-red-500 text-sm mt-1 block" />
                </div>

                <div>
                    <label for="password" class="block text-md font-medium text-gray-700 mb-2">
                        Password
                    </label>
                    <InputText id="password"
                               @bind-Value="loginModel.Password"
                               type="password"
                               class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200"
                               placeholder="Enter your password" />
                    <ValidationMessage For="@(() => loginModel.Password)"
                                       class="text-red-500 text-sm mt-1 block" />
                </div>

                <button type="submit"
                        disabled="@IsLoading"
                        class="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-semibold py-3 px-4 rounded-lg transition duration-200 transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-blue-500 focus:ring-opacity-50 disabled:transform-none">
                    @if (IsLoading)
                    {
                        <span>Logging in...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </EditForm>

            <div class="mt-6 p-4 bg-gray-100 rounded-lg">
                <h3 class="text-sm font-semibold text-gray-700 mb-2">Demo Credentials:</h3>
                <div class="text-xs text-gray-600 space-y-1">
                    <div>Registration: <strong>20240001</strong> | Password: <strong>Sameh_2024_0001</strong> (CS Student)</div>
                    <div>Registration: <strong>20240002</strong> | Password: <strong>Maria_2024_0002</strong> (Management Student)</div>
                    <div>Registration: <strong>20240003</strong> | Password: <strong>Ahmed_2024_0003</strong> (Graduated)</div>
                    <div>Registration: <strong>20240004</strong> | Password: <strong>Sama_2024_0004</strong> (CS Student)</div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string ErrorMessage = string.Empty;
    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.IsAuthenticated)
        {
            Navigation.NavigateTo("/Home");
        }

        await LoadCurrentSemester();
    }

    private async Task HandleLogin()
    {
        IsLoading = true;
        ErrorMessage = string.Empty;
        StateHasChanged();

        try
        {
            // Call the authentication service
            var student = await AuthService.LoginAsync(loginModel.RegistrationNumber, loginModel.Password);

            if (student != null)
            {
                Console.WriteLine($"Login: Student authenticated - {student.FullName}");

                await AuthState.SetStudentAsync(student);
                var semester = await AuthService.GetCurrentSemesterAsync();
                if (semester != null)
                {
                    await AuthState.SetSemesterAsync(semester);
                }

                Console.WriteLine("Login: Data stored in localStorage, navigating to dashboard");

                Navigation.NavigateTo("/Home");
            }
            else
            {
                ErrorMessage = "Invalid registration number or password. Please try again.";
                Console.WriteLine("Login: Authentication failed");
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "Login failed. Please check your connection and try again.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadCurrentSemester()
    {
        try
        {
            var semester = await AuthService.GetCurrentSemesterAsync();
            if (semester != null)
            {
                AuthState.SetSemesterAsync(semester);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load semester: {ex.Message}");
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Registration number is required")]
        [Range(10000000, 99999999, ErrorMessage = "Registration number must be 8 digits")]
        public int RegistrationNumber { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [MinLength(1, ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}